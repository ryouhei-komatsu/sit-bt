# マークダウン

ここは本文です。

```
コードブロックは翻訳されません。
```

本文は翻訳されます。

# サンプルテキスト

## サービス

私達は、プロトタイピングに特化したシステム開発をサービスとして提供しています。
プロトタイピングとは、最小限の機能を実装したアプリケーションを実際に商用稼働させ、フィードバックを反映させながら成長させる手法です。 
アプリケーションの実装は、弊社のエンジニアとクライアントのドメインエキスパートが膝を突き合わせながら進めていきます。

私達はこれまで、多くのSIプロジェクトで技術コンサルティング、技術支援を行ってきました。 SIプロジェクトの初期から参画し、Javaのアプリケーションアーキテクチャ・フレームワークの設計・開発・アプリチームへの展開を行います。
プロジェクトの規模は100人を超える大規模なものもあり、業種も通信、金融、運輸、小売、および官公庁と多岐に渡ります。

この実績・経験を活かし、現在はプロトタイピングを提案・実施しています。 
価値のあるシステムを安く早く開発するために、私達は以下の3つが重要だと考えています。

### Small Start

開発当初は、必要最小限のチームメンバーで必要最小限の機能を実装します。
必要な知識や技能を持ったメンバーでチームを構成すれば、説明資料や議事録の作成は最小限に抑えられます。
互いにソースコードを把握できる人数でチームを構成するので、理解度や進捗が正確に把握できます。
説明文書や進捗資料が、より良いプログラムを作ることに多くの時間と労力を使えます。

### Proof of Concept

どんなに時間と労力をかけてシステムを作っても、効果が出なかったり使われなかったりすれば全て無駄になります。
もしシステムのコンセプトを具現化した機能がシステム全体の1割だとすれば、まずはその1割だけでリリースすべきです。
仮にそのシステムが使われなかったとしても、残り9割を開発する時間と費用が節約できたことになります。
未来を正確に予測するよりも実際に作って動かす方が、よほど安く、しかも確実な結果が得られます。

### Continuous Improvement

システムは開発して終わりではなく、稼働させてからが始まりです。
小さく開発して稼働させ、分析、仮説、検証を繰り返して改善、機能拡張します。
私達はこのサイクルを早めるために、成果物の削減とプロセスの自動化に注力します。
## ケーススタディ

### 小売企業様

オンプレミスで構築された基幹システムをAWSに移行するプロジェクトに参画し、バッチアーキテクチャの設計・構築を担当しました。 SQS、Beanstalk、ECS、Spring Bootを用いた大規模分散処理を可能とするアプリケーションフレームワークを設計・構築しました。
また、高難度バッチの実装、パフォーマンスチューニングを行いました。

### 官公庁様

オンプレミスで構築されたシステムをクラウドに移行するプロジェクトに参画し、アプリケーションアーキテクチャのソリューション検討・検証を担当しました。
サーバーを仮想化、マネージドサービス化することでシステムリソースを削減し、アプリケーションのプログラム数を削減するソリューションを提案・検証しました。

### 金融研究系企業様

アルゴリズムトレードを行うシステムの開発プロジェクトに参画し、アプリケーションアーキテクチャ、DevOps領域の設計・構築を担当しました。
金融工学に基づいたビジネスロジックとイベントドリブンな実行アーキテクチャとを分離したドメインフレームワークを設計・実装しました。
またそれら資材のバージョン管理、自動テスト、自動デプロイ環境を構築しました。
また、任意のプログラミング言語で大規模分散処理を可能とするアプリケーションアーキテクチャをAWS Batchを用いて設計・構築しました。

### 官公庁系法人様

基幹システム再構築のための準備・検証プロジェクトに参画し、バッチアーキテクチャの検討・プロトタイプ開発を行っています。
現行システム内の高難度長時間バッチを、Spring Batch Integration、Kubernetesを用いてAWS上で分散し、アプリケーションの簡素化と高速化を目指しています。(2020年3月現在進行中)
